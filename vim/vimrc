" =============== General Settings And Initializations ===============
" Use vim settings rather than vi settings.
set nocompatible

" Initializes Vundle
source ~/.vim/vundlerc

" =============== Filetype Recognition ===============
filetype on
filetype plugin on
filetype indent on

" =============== Theme Enabling ===============
" Enable color syntax highlighting
set t_Co=256
syntax on
colorscheme jellybeans

" =============== Indentation ===============
" Controls how many columns a tab counts for.
set tabstop=4
" Controls how many columns text is indented with > and <.
set shiftwidth=4
" Inserts the ammount of space characters in 'tabstop' property instead of tabs.
set expandtab
" Removes the ammount of space characters in 'tabstop' when backspace is pressed.
set softtabstop=4
" Copy indent from current line when starting a new line.
set autoindent
" Round indent to multiple of 'shiftwidth'.
set shiftround
" Allows backspacing over autoindent, line breaks and over the start of insert.
set backspace=indent,eol,start

" =============== Searching ===============
" Enables search result's highlighting.
set hlsearch
" Enables incremental search.
set incsearch

" =============== Scrolling ===============
" Minimal number of screen lines to keep above and below the cursor.
set scrolloff=5
" When a line exceeds the width of the viewable screen, the screen will scroll
" horizontally to show the rest of the line.
set nowrap
" Faster terminal redrawing.
set ttyfast
" Highlights the column in the 80th character.
set textwidth=80
highlight WidthLimitHighlight ctermbg=8
highlight TODOHighlight ctermfg=88 ctermbg=7
" TODO: Remove linebreak characters from this highlight
call matchadd('WidthLimitHighlight', '\%81v', 100)
" TODO: Make this expression to match all TODOs but the one below
call matchadd('TODOHighlight', 'TODO:', 100)

" =============== Encoding ===============
set encoding=utf-8

" =============== Completion ===============
set wildmenu
set wildmode=list:longest

" =============== On Screen Information ===============
set number
" Shows tabstops, spaces and newlines.
set list
" Change the default tab and EOL characters.
set listchars=tab:▸\ ,eol:↲,trail:·
" Will only fold when specified by a marker.
set foldmethod=marker
" Shows the status line.
set laststatus=2
" Status line formatting:
" %< - Truncation point;
" %f - Relative path to file;
" %m - 'Modified' flag;
" %r - 'Readonly' flag;
" %y - Filetype;
" %= - Split point for left/right justification;
" %l - Current line number;
" %c - Current colum number;
" %L - Number of lines.
set statusline=%<%f\ %m\%r\%y%=\ [%l\,%c]\ %LL

" =============== Screen Splitting ===============
" Opens a vertical split pane in the bottom instead of in the (default) top
set splitbelow
" Opens a horizontal split pane in the right instead of in the (default) left
set splitright

" =============== Filetype-Specific Configuration ===============
autocmd BufNewFile, BufRead *.slim setfiletype slim
autocmd BufNewFile, BufRead *.scss setfiletype scss

augroup filetype_css
    autocmd!
    autocmd FileType css setlocal shiftwidth=2
    autocmd FileType css setlocal softtabstop=2
    autocmd FileType css setlocal tabstop=2
    " Disables all filetype-specific plugins
    autocmd FileType css setlocal runtimepath-=~/.vim/bundle/python-mode
    autocmd Filetype css setlocal runtimepath-=~/.vim/bundle/python-mode/after
augroup END

augroup filetype_html
    autocmd!
    autocmd FileType html setlocal shiftwidth=2
    autocmd FileType html setlocal softtabstop=2
    autocmd FileType html setlocal tabstop=2
    " Disables all filetype-specific plugins
    autocmd FileType html setlocal runtimepath-=~/.vim/bundle/python-mode
    autocmd Filetype html setlocal runtimepath-=~/.vim/bundle/python-mode/after
augroup END

augroup filetype_js
    autocmd!
    autocmd FileType js setlocal shiftwidth=4
    autocmd FileType js setlocal softtabstop=4
    autocmd FileType js setlocal tabstop=4
    " Disables all filetype-specific plugins
    autocmd FileType js setlocal runtimepath-=~/.vim/bundle/python-mode
    autocmd Filetype js setlocal runtimepath-=~/.vim/bundle/python-mode/after
augroup END

augroup filetype_python
    autocmd!
    autocmd FileType python setlocal shiftwidth=4
    autocmd FileType python setlocal softtabstop=4
    autocmd FileType python setlocal tabstop=4
    autocmd Filetype python iabbr ipython import IPython; IPython.embed()
augroup END

augroup filetype_ruby
    autocmd!
    autocmd FileType ruby setlocal shiftwidth=2
    autocmd FileType ruby setlocal softtabstop=2
    autocmd FileType ruby setlocal tabstop=2
    " Disables all filetype-specific plugins
    autocmd FileType ruby setlocal runtimepath-=~/.vim/bundle/python-mode
    autocmd Filetype ruby setlocal runtimepath-=~/.vim/bundle/python-mode/after
augroup END

augroup filetype_scss
    autocmd!
    autocmd FileType scss setlocal shiftwidth=2
    autocmd FileType scss setlocal softtabstop=2
    autocmd FileType scss setlocal tabstop=2
    " Disables all filetype-specific plugins
    autocmd FileType scss setlocal runtimepath-=~/.vim/bundle/python-mode
    autocmd Filetype scss setlocal runtimepath-=~/.vim/bundle/python-mode/after
augroup END

augroup filetype_slim
    autocmd!
    autocmd FileType slim setlocal shiftwidth=2
    autocmd FileType slim setlocal softtabstop=2
    autocmd FileType slim setlocal tabstop=2
    " Disables all filetype-specific plugins
    autocmd FileType slim setlocal runtimepath-=~/.vim/bundle/python-mode
    autocmd Filetype slim setlocal runtimepath-=~/.vim/bundle/python-mode/after
augroup END

" =============== Keyboard Remappings ===============
" Gets the current OS. This setting will be used to set some keyboard remappings
if has("unix")
    if system('uname')=~'Darwin'
        let os="mac"
    else
        let os="linux"
    endif
else
    let os="windows"
endif
" space - Leader
let mapleader=','
" Leader + ev (Normal mode) - Opens the .vimrc for editing
nnoremap <silent><leader>ev :vi $MYVIMRC<cr>
" Leader + ev (Normal mode) - Reloads the .vimrc
nnoremap <silent><leader>rv :source $MYVIMRC<cr>
" Leader + s (Normal mode) - Strips trailing whitespaces
nnoremap <silent><leader>t :call <SID>StripTrailingWhitespaces()<CR>
" Leader + w (Normal mode) - Opens the writing mode (Goyo) view
nnoremap <silent><leader>w :Goyo<cr>
" Leader + / (Normal mode) - Clears search highlights
nnoremap <silent><leader>/ :nohlsearch<cr>
" Leader + Enter (Normal mode) - Break a line
nnoremap <silent><leader><cr> i<cr><esc>
" Leader + _ (Normal mode) - Max out the height of the current split
nnoremap <silent><leader>_ <C-w>_
" Leader + | (Normal mode) - Max out the width of the current split
nnoremap <silent><leader>\| <C-w>\|
" Leader + = (Normal mode) - Normalize all split sizes
nnoremap <silent><leader>= <C-w>=
" Leader + s (Normal mode) - Swaps top/bottom or left/right splits
nnoremap <silent><leader>s <C-w>r
" Leader + t (Normal mode) - Transforms the current file into a new tab
nnoremap <silent><leader>x <C-w>T
if os =~ "mac"
    " Ctrl + c - Copies to clipboard
    vnoremap <silent><C-c> :w !pbcopy<cr><cr>
    " Ctrl + p - Pastes from clipboard
    nnoremap <silent><C-p> :setlocal paste <bar>
\       :r !pbpaste<cr><cr> <bar> :setlocal nopaste
elseif os =~ "linux"
    " Ctrl + c - Copies to clipboard
    vnoremap <silent><C-c> :w !xclip -selection clipboard<cr><cr>
    " Ctrl + p - Pastes from clipboard
    nnoremap <silent><C-p> :setlocal paste <bar>
\       :r !xclip -o -selection clipboard<cr><cr> <bar>
\       :setlocal nopaste :setlocal nopaste
endif
" Tab/Shift-Tab (Normal mode) - Indents
nnoremap <tab> >>
nnoremap <s-tab> <<
vnoremap <tab> >gv
vnoremap <s-tab> <gv
" Ctrl + hjkl (Normal) - Moves between splits
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
" Disables arrows, page up/down, + and -
" Hint: use ?, /, n, N, f, F, ;, <num>G, <num>W, <num>B, <num>|, 0, ^, $
inoremap <Left> <NOP>
inoremap <Right> <NOP>
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <PageUp> <NOP>
inoremap <PageDown> <NOP>
nnoremap <Left> <NOP>
nnoremap <Right> <NOP>
nnoremap <Up> <NOP>
nnoremap <Down> <NOP>
nnoremap <PageUp> <NOP>
nnoremap <PageDown> <NOP>
vnoremap <Left> <NOP>
vnoremap <Right> <NOP>
vnoremap <Up> <NOP>
vnoremap <Down> <NOP>
vnoremap <PageUp> <NOP>
vnoremap <PageDown> <NOP>
vnoremap + <NOP>
vnoremap - <NOP>
" =============== Bundle-Specific Mods ===============
" Disables folding on python-mode
let g:pymode_folding = 0
" Enables symbols on powerline (Used along with Inconsolata-dz-Powerline font)
let g:Powerline_symbols = 'fancy'

" =============== Custom Functions ===============
" Removes blank spaces at the end of the lines.
function! <SID>StripTrailingWhitespaces()
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction
" Gets the current OS
function! GetCurrentOS()
endfunction
